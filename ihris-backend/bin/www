#!/usr/bin/env node

/**
 * Module dependencies.
 */


var app = require('../app');
var debug = require('debug')('ihris-backend:server');
var http = require('http');

//  register mediator
const registerMediator = require('openhim-mediator-utils')
// fetch mediator config 
const mediatorConfig = require(`${__dirname}/../config/mediator`);
// config
const config = require('../modules/config')
// logger
const logger = require('../winston')
// fhir audit
const fhirAudit = require('../modules/fhirAudit')
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

app.whenReady().then(() => {

  server.listen(port, () => {
    // heartbeat
    const configEmitter = registerMediator.activateHeartbeat(config.get('mediator:api'));
    configEmitter.on('config', newConfig => {
      logger.info('Received updated config:', JSON.stringify(newConfig, null, 2));
    })

    configEmitter.on('error', err => {
      logger.info('Heartbeat failed', err)
      process.exit(1)
    })

  });
  server.on('error', onError);
  server.on('listening', onListening);


})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  fhirAudit.startup()
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
