{"version":3,"file":"js/728.3a787933.js","mappings":"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","sources":["webpack://iHRIS-v5/./src/site/view/bw-resource.vue?a730","webpack://iHRIS-v5/src/site/view/bw-resource.vue","webpack://iHRIS-v5/./src/site/view/bw-resource.vue?1e9a","webpack://iHRIS-v5/./src/site/view/bw-resource.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-container',{key:_vm.pageKey,staticClass:\"my-3\"},[_c('v-form',{ref:\"form\",model:{value:(_vm.valid),callback:function ($$v) {_vm.valid=$$v},expression:\"valid\"}},[_vm._t(\"default\",null,{\"source\":_vm.source}),_c('v-overlay',{attrs:{\"value\":_vm.overlay}},[_c('v-progress-circular',{attrs:{\"color\":\"primary\",\"indeterminate\":\"\",\"size\":\"50\"}})],1)],2)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<style>\n.highlighted {\n  background-color: #5396dc !important;\n}\n</style>\n<template>\n  <v-container :key=\"pageKey\" class=\"my-3\">\n    <v-form\n        ref=\"form\"\n        v-model=\"valid\"\n    >\n      <slot :source=\"source\"></slot>\n      <v-overlay :value=\"overlay\">\n        <v-progress-circular\n            color=\"primary\"\n            indeterminate\n            size=\"50\"\n        ></v-progress-circular>\n      </v-overlay>\n    </v-form>\n  </v-container>\n\n</template>\n\n<script>\n\nexport default {\n  name: \"ihris-resource\",\n  props: [\"title\", \"field\", \"fhir-id\", \"page\", \"profile\", \"section-menu\", \"edit\", \"links\", \"constraints\"],\n  data: function () {\n    return {\n      fhir: {},\n      orig: {},\n      valid: true,\n      source: {data: {}, path: \"\"},\n      path: \"\",\n      loading: false,\n      overlay: false,\n      isEdit: false,\n      linktext: [],\n      position: \"\",\n      advancedValid: true,\n      loadingId: false,\n      loadingCv: false,\n      version: 1,\n      max: 1,\n      pageKey: 0,\n      rules: {\n        min: v => v >= 1 || `The Min is 1`,\n        max: v => v <= this.max || `The Max is ${this.max}`\n      },\n    }\n  },\n  created: function () {\n    if (this.fhirId) {\n      this.loading = true\n      fetch(\"/fhir/\" + this.field + \"/\" + this.fhirId).then(response => {\n        response.json().then(data => {\n          //this.$store.commit('setCurrentResource', data)\n          this.max = data.meta.versionId\n          this.orig = data\n          this.source = {data: data, path: this.field}\n          this.setLinkText()\n          this.loading = false\n        }).catch(err => {\n          console.log(this.field, this.fhirId, err)\n        })\n      }).catch(err => {\n        console.log(this.field, this.fhirId, err)\n      })\n    } else if (this.$route.query) {\n      let presets = {\n        resourceType: this.field\n      }\n      let hasPresets = false\n      for (let path of Object.keys(this.$route.query)) {\n        if (path.startsWith(this.field + \".\")) {\n          hasPresets = true\n          let elements = path.substring(this.field.length + 1).split('.')\n          let last = elements.pop()\n          let current = presets\n          for (let element of elements) {\n            if (element.includes('[')) {\n              try {\n                let parts = element.split('[')\n                let name = parts[0]\n                let idx = parts[1].slice(0, -1)\n                if (!current.hasOwnProperty(name)) {\n                  current[name] = []\n                }\n                if (idx) {\n                  let next = {}\n                  current[name][parseInt(idx)] = next\n                  current = next\n                } else {\n                  let next = {}\n                  current[name].push(next)\n                  current = next\n                }\n              } catch (err) {\n                console.log(\"Unable to process\", path)\n\n              }\n            } else {\n              if (!current.hasOwnProperty(element)) {\n                current[element] = {}\n                current = current[element]\n              }\n            }\n          }\n          if (last.includes('[')) {\n            try {\n              let parts = last.split('[')\n              let name = parts[0]\n              let idx = parts[1].slice(0, -1)\n              if (!current.hasOwnProperty(name)) {\n                current[name] = []\n              }\n              if (idx) {\n                current[name][parseInt(idx)] = this.$route.query[path]\n              } else {\n                current[name].push(this.$route.query[path])\n              }\n\n            } catch (err) {\n              console.log(\"Unable to process\", path)\n\n            }\n          } else {\n            current[last] = this.$route.query[path]\n          }\n        }\n      }\n      if (hasPresets) {\n        this.source = {data: presets, path: this.field}\n      }\n    }\n  },\n  computed: {\n    hasFhirId: function () {\n      if (this.fhirId == '') {\n        return false\n      } else if (!this.fhirId) {\n        return false\n      } else {\n        return true\n      }\n    }\n    /*\n    source: function() {\n      return this.$store.state.fhir\n    }\n    */\n  },\n  methods: {\n    getLinkField: function (field) {\n      let content = this.$fhirpath.evaluate(this.source.data, field)\n      if (content) {\n        return content[0]\n      } else {\n        return false\n      }\n    },\n    getLinkUrl: function (link) {\n      let field\n      if (link.field) {\n        field = this.getLinkField(link.field)\n      }\n      if (field) {\n        if (field.includes('/')) {\n          let ref = field.split('/')\n          field = ref[1]\n        }\n        return link.url.replace(\"FIELD\", field)\n      } else {\n        return link.url\n      }\n    },\n    setLinkText: function () {\n      for (let idx in this.links) {\n        let link = this.links[idx]\n        if (link.text) {\n          this.linktext[idx] = link.text\n        } else if (link.field) {\n          let field = this.getLinkField(link.field)\n          if (field) {\n            this.$fhirutils.lookup(field).then(display => {\n              this.$set(this.linktext, idx, display)\n            })\n          }\n        }\n      }\n    },\n    processFHIR: async function () {\n      this.$refs.form.validate()\n      if (!this.valid) return\n      this.advancedValid = true\n      this.overlay = true\n      this.loading = true\n\n      //const processChildren = function( parent, obj, children ) {\n      const processChildren = async (parent, obj, children) => {\n        //console.log(\"called on \"+parent)\n\n        for (let child of children) {\n\n          let fullField = parent\n\n          let next = obj\n\n          if (child.field && !child.fieldType /* ignore arrays */) {\n            //console.log(\"working on \"+parent+\" . \"+child.field)\n            let field\n            if (child.sliceName) {\n              if (child.field.startsWith(\"value[x]\")) {\n                field = child.field.substring(9)\n                fullField += \".\" + field\n              } else {\n                field = child.field.replace(\":\" + child.sliceName, \"\")\n                fullField += \".\" + field\n              }\n            } else {\n              field = child.field\n              fullField += \".\" + field\n            }\n            if (child.max !== \"1\" || child.baseMax !== \"1\") {\n              if (!obj.hasOwnProperty(field)) {\n                next[field] = []\n              }\n            } else {\n              next[field] = {}\n            }\n            //console.log(fullField)\n            //console.log(child.max, child.baseMax)\n            //console.log(child)\n            if (child.hasOwnProperty(\"value\")) {\n              //console.log( fullField +\"=\"+ child.value )\n              if (Array.isArray(next[field])) {\n                next[field].push(child.value)\n              } else {\n                next[field] = child.value\n              }\n              next = next[field]\n            } else {\n              if (Array.isArray(next[field])) {\n                let sub = {}\n                if (child.profile) {\n                  sub.url = child.profile\n                } else if (field === \"extension\" && child.sliceName) {\n                  sub.url = child.sliceName\n                }\n                next[field].push(sub)\n                next = sub\n              } else {\n                next = next[field]\n              }\n            }\n          }\n\n          if (child.$children) {\n            try {\n              await processChildren(fullField, next, child.$children)\n            } catch (err) {\n              this.advancedValid = false\n              console.log(err)\n            }\n          }\n          if (child.constraints) {\n            child.errors = []\n            try {\n              this.advancedValid = this.advancedValid && await this.$fhirutils.checkConstraints(child.constraints,\n                  this.constraints, next, child.errors, this.fhirId)\n            } catch (err) {\n              this.advancedValid = false\n              child.errors.push(\"An unknown error occurred.\")\n              console.log(err)\n            }\n          }\n\n        }\n\n      }\n\n      //console.log(this.field)\n      this.fhir = {\n        resourceType: this.field,\n        meta: {\n          profile: [this.profile]\n        }\n      }\n      //console.log(this)\n      try {\n        await processChildren(this.field, this.fhir, this.$children)\n      } catch (err) {\n        this.advancedValid = false\n        console.log(err)\n      }\n      if (!this.advancedValid) {\n        this.overlay = false\n        this.loading = false\n        this.$store.commit('setMessage', {type: 'error', text: 'There were errors on the form.'})\n        return\n      }\n      console.log(\"FINISHED PROCESS AND CHECK.\")\n      let url = \"/fhir/\" + this.field\n      let opts = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/fhir+json\"\n        },\n        redirect: 'manual',\n      }\n      if (this.fhirId) {\n        this.fhir.id = this.fhirId\n        url += \"/\" + this.fhirId\n        opts.method = \"PUT\"\n      }\n      opts.body = JSON.stringify(this.fhir)\n      fetch(url, opts).then(response => {\n        //console.log(response.headers)\n        if (response.status === 201 || response.status === 200) {\n          response.json().then(data => {\n            this.overlay = false\n            this.loading = false\n\n            if (this.fhirId) {\n              this.$store.commit(\"setMessage\", {\n                type: \"success\",\n                text: \"Update successful.\",\n              });\n              setTimeout(() => this.$router.go(0), 1000);\n            } else {\n              this.$router.push({name: \"resource_view\", params: {page: this.page, id: data.id}})\n            }\n          })\n        }\n      })\n      //console.log(this.fhir)\n\n      /*\n      console.log(this.$scopedSlots.default())\n      processSlots( this.field, this.$scopedSlots.default() )\n      */\n    }\n  }\n}\n\n</script>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./bw-resource.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./bw-resource.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./bw-resource.vue?vue&type=template&id=5426bae9&\"\nimport script from \"./bw-resource.vue?vue&type=script&lang=js&\"\nexport * from \"./bw-resource.vue?vue&type=script&lang=js&\"\nimport style0 from \"./bw-resource.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VContainer } from 'vuetify/lib/components/VGrid';\nimport { VForm } from 'vuetify/lib/components/VForm';\nimport { VOverlay } from 'vuetify/lib/components/VOverlay';\nimport { VProgressCircular } from 'vuetify/lib/components/VProgressCircular';\ninstallComponents(component, {VContainer,VForm,VOverlay,VProgressCircular})\n"],"names":["render","_vm","this","_h","$createElement","_c","_self","key","pageKey","staticClass","ref","model","value","callback","$$v","valid","expression","_t","source","attrs","overlay","staticRenderFns","name","props","data","fhir","orig","path","loading","isEdit","linktext","position","advancedValid","loadingId","loadingCv","version","max","rules","min","created","fetch","response","catch","err","console","resourceType","hasPresets","current","computed","hasFhirId","methods","getLinkField","getLinkUrl","field","setLinkText","processFHIR","fullField","next","sub","child","meta","profile","type","text","method","headers","redirect","url","opts","setTimeout","params","page","id","component","VContainer"],"sourceRoot":""}