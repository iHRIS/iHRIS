{"version":3,"file":"js/fhir-reference.9ffea6d0.js","mappings":"8JAGO,MAAMA,EAAc,CACzBC,OACE,MAAO,CACLC,MAAM,EACNC,OAAQ,KAGZC,QAAS,CACPC,cAAcC,EAAkBC,GAC9B,GAAGD,EAAkB,CACnBE,KAAKN,MAAO,EACZ,IAAIO,EAAaH,EAAiBI,MAAM,MACxC,IAAI,IAAIC,KAAQF,EAAY,CAC1B,IAAIG,EAAYD,EAAKD,MAAM,KACvBG,EAAOD,EAAU,GACjBE,EAAWF,EAAU,GACrBG,EAAYH,EAAU,GACtBJ,KAAKL,OAAOU,KACdL,KAAKL,OAAOU,GAAQ,CAClBZ,KAAM,KAGVO,KAAKL,OAAOU,GAAMZ,KAAKe,KAAK,CAC1BC,YAAaF,EACbD,aAEFI,EAAAA,EAAAA,IAAaL,GAAOM,IAClBX,KAAKL,OAAOU,GAAMO,YAAcD,EAChCX,KAAKN,MAAO,EACZ,IAAIA,EAAO,GACX,IAAI,IAAIW,KAAQL,KAAKL,OAAQ,CAC3B,IAAIiB,EAAcZ,KAAKL,OAAOU,GAAMO,YACpC,IAAI,IAAIC,KAAYb,KAAKL,OAAOU,GAAMZ,KAAM,CAC1C,IAAIgB,EAAcI,EAASJ,YACvBH,EAAWO,EAASP,SACP,MAAbA,GAAoBG,GAAeG,GAA8B,OAAbN,GAAqBG,GAAeG,GAErE,WAAbN,GAAyC,KAAhBM,GAGnB,MAAbN,GAAoBG,EAAcG,GACrB,MAAbN,GAAoBG,EAAcG,GACrB,OAAbN,GAAqBG,GAAeG,GACvB,OAAbN,GAAqBG,GAAeG,EAPrClB,EAAKW,EAAO,IAAMI,IAAe,GAWjCf,EAAKW,EAAO,IAAMI,IAAe,EAC7BV,GAAqC,QAAnBA,IACpBC,KAAKN,MAAO,KAKpB,GAAGK,GAAqC,QAAnBA,EAA0B,CAC7C,IAAIe,GAAU,EACd,IAAI,IAAIC,KAAMrB,EACRA,EAAKqB,KACPD,GAAU,GAGVA,IACFd,KAAKN,MAAO,aAMpBM,KAAKN,MAAO","sources":["webpack://iHRIS-v5/./src/mixins/dataDisplay.js"],"sourcesContent":["import {\n  eventBus\n} from '@/main'\nexport const dataDisplay = {\n  data() {\n    return {\n      hide: false,\n      pathes: {}\n    }\n  },\n  methods: {\n    hideShowField(displayCondition, enableBehavior) {\n      if(displayCondition) {\n        this.hide = true\n        let conditions = displayCondition.split('+=')\n        for(let cond of conditions) {\n          let condition = cond.split('|')\n          let path = condition[0]\n          let operator = condition[1]\n          let condValue = condition[2]\n          if(!this.pathes[path]) {\n            this.pathes[path] = {\n              data: []\n            }\n          }\n          this.pathes[path].data.push({\n            expectedVal: condValue,\n            operator\n          })\n          eventBus.$on(path, (value) => {\n            this.pathes[path].selectedVal = value\n            this.hide = false\n            let hide = {}\n            for(let path in this.pathes) {\n              let selectedVal = this.pathes[path].selectedVal\n              for(let pathData of this.pathes[path].data) {\n                let expectedVal = pathData.expectedVal\n                let operator = pathData.operator\n                if((operator === '=' && expectedVal == selectedVal) || (operator === '!=' && expectedVal != selectedVal)) {\n                  hide[path + '#' + expectedVal] = false\n                } else if(operator === 'exists' && selectedVal !== \"\") {\n                  hide[path + '#' + expectedVal] = false\n                } else if(\n                  (operator === '>' && expectedVal > selectedVal) || \n                  (operator === '<' && expectedVal < selectedVal) ||\n                  (operator === '<=' && expectedVal <= selectedVal) ||\n                  (operator === '>=' && expectedVal >= selectedVal)\n                ) {\n                  hide[path + '#' + expectedVal] = false\n                } else {\n                  hide[path + '#' + expectedVal] = true\n                  if(!enableBehavior || enableBehavior === 'all') {\n                    this.hide = true\n                  }\n                }\n              }\n            }\n            if(enableBehavior && enableBehavior === 'any') {\n              let canShow = false\n              for(let hd in hide) {\n                if(!hide[hd]) {\n                  canShow = true\n                }\n              }\n              if(!canShow) {\n                this.hide = true\n              }\n            }\n          })\n        }\n      } else {\n        this.hide = false\n      }\n    }\n  }\n}"],"names":["dataDisplay","data","hide","pathes","methods","hideShowField","displayCondition","enableBehavior","this","conditions","split","cond","condition","path","operator","condValue","push","expectedVal","eventBus","value","selectedVal","pathData","canShow","hd"],"sourceRoot":""}